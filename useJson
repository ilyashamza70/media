import json
import os

courses = {
    "Electronics for embedded systems": 10,
    "Computer architectures": 10,
    "Operating systems for embedded systems": 8,
    "Specification and simulation of digital systems": 6,
    "Synthesis and optimization of digital systems": 6,
    "Microelectronic systems": 6,
    "Cybersecurity for Embedded Systems": 6,
    "Software engineering": 8,
    "Energy management for IoT": 6,
    "System-on-chip architecture": 6,
    "Testing and fault tolerance": 6,
    "Technologies for Autonomous Vehicles" : 6,	
    "Modeling and optimization of embedded systems": 6,
    "Final project work": 30

}
log_file_json = 'simulation_log.json'

def save_simulation_log_json(grades, weighted_avg, arithmetic_avg, graduation_grade):
    simulation = {
        'grades': grades,
        'weighted_avg': weighted_avg,
        'arithmetic_avg': arithmetic_avg,
        'graduation_grade': graduation_grade
    }
    
    if os.path.exists(log_file_json):
        with open(log_file_json, 'r') as f:
            log = json.load(f)
    else:
        log = []
    
    if simulation not in log:
        log.append(simulation)
        with open(log_file_json, 'w') as f:
            json.dump(log, f, indent=4)
        print("Simulation saved.")
    else:
        print("Simulation already exists.")


def main():
    grades = {}
    print("Enter your grades for the following courses:")
    for course in courses:
        grade = float(input(f"{course}: "))
        grades[course] = grade
    
    weighted_avg = calculate_weighted_average(grades)
    arithmetic_avg = calculate_arithmetic_average(grades)
    graduation_grade = calculate_graduation_grade(weighted_avg)
    
    print(f"Weighted Average: {weighted_avg:.2f}")
    print(f"Arithmetic Average: {arithmetic_avg:.2f}")
    print(f"Predicted Graduation Grade: {graduation_grade:.2f}")
    
    plot_averages(weighted_avg, arithmetic_avg)
    plot_graduation_grade(graduation_grade)
    
    save_simulation_log_json(grades, weighted_avg, arithmetic_avg, graduation_grade)

if __name__ == "__main__":
    main()
